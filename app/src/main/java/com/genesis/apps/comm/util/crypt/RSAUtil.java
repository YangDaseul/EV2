package com.genesis.apps.comm.util.crypt;

import org.spongycastle.asn1.ASN1ObjectIdentifier;
import org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers;
import org.spongycastle.asn1.x509.X509ObjectIdentifiers;
import org.spongycastle.crypto.params.RSAKeyParameters;
import org.spongycastle.crypto.params.RSAPrivateCrtKeyParameters;
import org.spongycastle.jce.provider.BouncyCastleProvider;
import org.spongycastle.util.Arrays;
import org.spongycastle.util.Fingerprint;

import java.math.BigInteger;
import java.security.KeyFactory;
import java.security.Security;
import java.security.Signature;
import java.security.interfaces.RSAPrivateCrtKey;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.RSAPublicKeySpec;


public class RSAUtil {
	static {
		Security.insertProviderAt(new BouncyCastleProvider(), 1);
	}
	public static final ASN1ObjectIdentifier[] rsaOids = { PKCSObjectIdentifiers.rsaEncryption,
			X509ObjectIdentifiers.id_ea_rsa, PKCSObjectIdentifiers.id_RSAES_OAEP, PKCSObjectIdentifiers.id_RSASSA_PSS };

	public static boolean isRsaOid(ASN1ObjectIdentifier algOid) {
		for (int i = 0; i != rsaOids.length; i++) {
			if (algOid.equals(rsaOids[i])) {
				return true;
			}
		}

		return false;
	}

	static RSAKeyParameters generatePublicKeyParameter(RSAPublicKey key) {
		return new RSAKeyParameters(false, key.getModulus(), key.getPublicExponent());

	}

	static RSAKeyParameters generatePrivateKeyParameter(RSAPrivateKey key) {
		if (key instanceof RSAPrivateCrtKey) {
			RSAPrivateCrtKey k = (RSAPrivateCrtKey) key;

			return new RSAPrivateCrtKeyParameters(k.getModulus(), k.getPublicExponent(), k.getPrivateExponent(),
					k.getPrimeP(), k.getPrimeQ(), k.getPrimeExponentP(), k.getPrimeExponentQ(), k.getCrtCoefficient());
		} else {
			RSAPrivateKey k = key;

			return new RSAKeyParameters(true, k.getModulus(), k.getPrivateExponent());
		}
	}

	static String generateKeyFingerprint(BigInteger modulus, BigInteger publicExponent) {
		return new Fingerprint(Arrays.concatenate(modulus.toByteArray(), publicExponent.toByteArray())).toString();
	}

	public static RSAPublicKey getRsaRootPublicKey() throws Exception {

		KeyFactory kf = KeyFactory.getInstance("RSA", "BC");
//        CertParser parser = new CertParser();
//        MyRootRsaCert rootCert = parser
//                .getRootRsaCert(HexStringConverter.stringToHex(certData.getProperty("root.rsa.cert")));
//        rootCert.m = rootCert.m[0] < 0 ? (ByteUtils.append(new byte[]{0x00}, rootCert.m)) : rootCert.m;

		RSAPublicKeySpec pubKeySpec = new RSAPublicKeySpec(new BigInteger("00AA7BB3D5EB76125BDD659031753505A4C157D6A5D676E8D51D0A0814B73197934DEF1CE89EF0077238437FBCE1C4E8CDC019D73946B3055F39BDFBFF1F694A674F3A98CD6284CDEAA848D13A76D4301FA654783381361FC6171F54D5F1A0CCB06939247A9D8BC176AC99D416528E8BB1E7A1D362A765C074A37DFB03B8B479AEC449B6F54537212C403F602C77094D3411D57B37FE6BB97CB44FD8D3DE9B8236F2E83476DDCEC85604A623132F50CC753C9EE3C6CE27A6AC3831EBCAFCED8EEA9A37457FB9DB109AAB47956DE9F4314807258B71B391B66B4805F8BB858039C51A99359DF2041917F1B30490BFA6320F5E85A68FDE8649C160E343F5D0340CB1", 16),
				new BigInteger("010001", 16));

		return (RSAPublicKey) kf.generatePublic(pubKeySpec);
	}

	public static RSAPrivateKey getRsaRootPrivateKey() throws Exception {

		KeyFactory kf = KeyFactory.getInstance("RSA", "BC");
		PKCS8EncodedKeySpec pkcsKeySpec = new PKCS8EncodedKeySpec(
				HexStringConverter.stringToHex

		return (RSAPrivateKey) kf.generatePrivate(pkcsKeySpec);
	}

	public static RSAPublicKey getRsaDkcPublicKey() throws Exception {

		KeyFactory kf = KeyFactory.getInstance("RSA", "BC");

		RSAPublicKeySpec pubKeySpec = new RSAPublicKeySpec(new BigInteger("AC2CC3DEE2CEEDC65DC25D42698AA42A077551B0C80C684FC4BAC967D596F951B5547A405F144D386D74D5F29321C604BA278FDE6F18ED5E6698C7594778C63D51C0CC1E1C29300EBAA66635D2016CE9954FC499F688F6E8EE52194BD35EAB533B7FB6EDCE462B8C411EE4ED1764CFBAC649745CAC70C3C63700FE21BC016A03A587B2189E043F37D91D43CD07C3AD4AAA6AB9882C5621A78E447907E00723D4AF2B0B9BF93202543B05DA6E27EE6C1580CBF2A2D3CEEF23C3BE05C5744DD6E2AB1938AC9B51DB93D6EC8036650024AC6171DA71922DC887EFD167669B6F9DC05641134BB2845207C818CD6BA3F51148558E6D9F4872480DAA47FC86618FDBFD", 16),
				new BigInteger("010001", 16));

		return (RSAPublicKey) kf.generatePublic(pubKeySpec);
	}

	public static RSAPrivateKey getRsaDkcPrivateKey() throws Exception {

		KeyFactory kf = KeyFactory.getInstance("RSA", "BC");
		PKCS8EncodedKeySpec pkcsKeySpec = new PKCS8EncodedKeySpec(
				HexStringConverter.stringToHex
		return (RSAPrivateKey) kf.generatePrivate(pkcsKeySpec);
	}

	public static RSAPublicKey getRsaUserPublicKey() throws Exception {

		KeyFactory kf = KeyFactory.getInstance("RSA", "BC");

		RSAPublicKeySpec pubKeySpec = new RSAPublicKeySpec(new BigInteger("C8328E724EB868247A057FD907FE6CFF85C1BC12A2F0C2A87384B554F3862D73CAE0F874FD6601DD1FAECE6CF2027316084E51DF90E0D87E02E2860E615D5ABC3E9037C029B7B5A53931E39E612F2C5FD60F6EFDBDFF38171D6BCD818930E394E74055BA2DBEE1DB725A472BB052BB4989317DF7A6951F9AA030CF96416FD252775157408D00DEC3EB223F5C16C902F5F539EF35A204E919F003AC3BEE09CE26EF2FC031BA8765F71B70D27A315BA783604A74BF861995A7B23AE5E2DC9AD4064FE69ED7B5BCAEC7F11AD15A421273FEFDD5DD8519EFDCEE522C242A3FC24A2A5DE0AB58EC81AFBBFC2BDE96D1DD1F230DC69CB5ACFEC6BEBE40BF7344D343A1", 16),
				new BigInteger("010001", 16));

		return (RSAPublicKey) kf.generatePublic(pubKeySpec);
	}
	public static RSAPrivateKey getRsaUserPrivateKey() throws Exception {

		KeyFactory kf = KeyFactory.getInstance("RSA", "BC");
		PKCS8EncodedKeySpec pkcsKeySpec = new PKCS8EncodedKeySpec(
				HexStringConverter.stringToHex
		return (RSAPrivateKey) kf.generatePrivate(pkcsKeySpec);
	}

	public static byte[] rsaSign_server(byte[] data) throws Exception {
		KeyFactory kf = KeyFactory.getInstance("RSA", "SC");
		Signature sign = Signature.getInstance("SHA256withRSA", "SC");
		sign.initSign(getRsaDkcPrivateKey());
		sign.update(data);
		byte[] signature = sign.sign();

		return signature;
	}

}